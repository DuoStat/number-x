name: Atualizador de Dados do Double

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v3

      - name: Setup do Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Busca API e Atualiza Histórico
        id: update_script
        run: |
          node -e "
            const fs = require('fs').promises;
            const path = require('path');

            const HISTORY_FILE_PATH = path.join(__dirname, 'history.json');
            const BLAZE_API_URL = 'https://blaze.com/api/roulette_games/recent'; 
            const HISTORY_MAX_LENGTH = 480;

            async function run() {
              try {
                console.log('Buscando dados da API da Blaze...');
                const response = await fetch(BLAZE_API_URL);
                if (!response.ok) {
                  throw new Error(`Falha na API: Status ${response.status}`);
                }
                const apiData = await response.json();

                if (!apiData || !Array.isArray(apiData) || apiData.length === 0) {
                  throw new Error('Resposta da API inválida ou vazia.');
                }
                
                const lastApiRollId = apiData[apiData.length - 1].id;

                let history = [];
                let lastKnownId = null;

                try {
                  const historyFileContent = await fs.readFile(HISTORY_FILE_PATH, 'utf8');
                  // Simplificando: vamos assumir que o arquivo SÓ tem o array
                  const savedHistory = JSON.parse(historyFileContent);
                  if (Array.isArray(savedHistory)) {
                      history = savedHistory;
                  }
                } catch (e) {
                  console.log('Arquivo de histórico não encontrado, será criado um novo.');
                }
                
                // Verifica se o último número da API já está no nosso histórico para evitar duplicação.
                // Isso é uma forma de saber se já atualizamos
                const lastApiRollNumber = apiData[apiData.length-1].roll;
                if (history.length > 0 && history[history.length - 1] === lastApiRollNumber && apiData.length === history.length) {
                    console.log('Nenhum resultado novo detectado. O histórico já está sincronizado.');
                    return process.stdout.write('::set-output name=updated::false\n');
                }

                console.log('Novos resultados encontrados! Atualizando histórico...');
                
                // Pega todos os números válidos (sem o branco) da API
                const allValidRolls = apiData.filter(roll => roll.roll !== 0).map(roll => roll.roll);
                
                // Garante que o histórico final tenha no máximo o tamanho definido
                const newHistory = allValidRolls.slice(-HISTORY_MAX_LENGTH);

                await fs.writeFile(HISTORY_FILE_PATH, JSON.stringify(newHistory, null, 2), 'utf8');
                console.log(`Histórico atualizado. Total de ${newHistory.length} rodadas.`);
                return process.stdout.write('::set-output name=updated::true\n');

              } catch (error) {
                console.error('Erro durante a execução do script:', error);
                process.exit(1);
              }
            }

            run();
          "

      - name: Commit e Push das mudanças
        if: steps.update_script.outputs.updated == 'true'
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add history.json
          git commit -m "chore(data): Atualiza histórico do Double"
          git push
